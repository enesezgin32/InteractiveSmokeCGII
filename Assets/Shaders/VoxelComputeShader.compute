#pragma kernel CSVoxelizeMap
#pragma kernel CSCreateSmokeVoxels

struct Voxel
{
    float3 position;
    float4 color;
};



RWStructuredBuffer<int> mapVoxelInfo; //tum harita

RWStructuredBuffer<Voxel> mapVoxels; // test amacli

StructuredBuffer<float3> meshVertices; //static objects' vertices

StructuredBuffer<uint> meshIndices; //static objects' indices

uint meshIndiceCount; //static objects' indice count

float3 centerPosition; //map center 

float voxelSize; //size of each voxel 

uint3 gridSize; //size of map to voxelize

float smokeRadius; // radius of smoke
uint smokeWidth; //width of smoke
uint smokeHeight; //height of smoke
float3 smokeCenter; //center of smoke to spawn

RWStructuredBuffer<Voxel> smokeVoxels; //smoke voxels




struct Triangle
{
    float3 a;
    float3 b;
    float3 c;
};

struct AABB
{
    float3 center;
    float3 extents;
};


float rand(float2 co)
{
    return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}

uint3 indexToCord(uint index)
{
    uint z = index / (gridSize.x * gridSize.y);
    uint y = (index % (gridSize.x * gridSize.y)) / gridSize.x;
    uint x = index % gridSize.x;
    
    return uint3(x, y, z);
}

uint cordToIndex(uint3 cord)
{
    return cord.x + gridSize.x * (cord.y + gridSize.y * cord.z);
}

uint posToIndex(float3 position)
{
    float3 centerOffset = centerPosition - float3(voxelSize * gridSize.x * 0.5f, 0, voxelSize * gridSize.z * 0.5f) + float3(1.0f, 0.0f, 1.0f) * voxelSize * 0.5f;
    uint3 id = (position - centerOffset) / voxelSize; // find x y z in float values
    uint index = ((uint) id.x + gridSize.x * ((uint) id.y + gridSize.y * (uint) id.z));
    return index;
}

uint3 posToCord(float3 position)
{
    float3 centerOffset = centerPosition - float3(voxelSize * gridSize.x * 0.5f, 0, voxelSize * gridSize.z * 0.5f) + float3(1.0f, 0.0f, 1.0f) * voxelSize * 0.5f;
    uint3 id = (position - centerOffset) / voxelSize; // find x y z in float values
    uint index = ((uint) id.x + gridSize.x * ((uint) id.y + gridSize.y * (uint) id.z));
    return indexToCord(index);
}

float3 indexToPos(uint index)
{
    uint3 id = indexToCord(index);

    float3 centerOffset = centerPosition - float3(voxelSize * gridSize.x * 0.5f, 0, voxelSize * gridSize.z * 0.5f) + float3(1.0f, 0.0f, 1.0f) * voxelSize * 0.5f;
    float3 position = float3(id.x, id.y, id.z) * voxelSize + centerOffset;

    return position;
}

float3 cordToPos(uint3 cord)
{
    float3 centerOffset = centerPosition - float3(voxelSize * gridSize.x * 0.5f, 0, voxelSize * gridSize.z * 0.5f) + float3(1.0f, 0.0f, 1.0f) * voxelSize * 0.5f;
    float3 position = float3(cord.x, cord.y, cord.z) * voxelSize + centerOffset;
    return position;
}






bool TriangleIntersectsAABBSat(float3 v0, float3 v1, float3 v2, float3 aabbExtents, float3 axis)
{
    float p0 = dot(v0, axis);
    float p1 = dot(v1, axis);
    float p2 = dot(v2, axis);

    float r = aabbExtents.x * abs(dot(float3(1, 0, 0), axis)) +
              aabbExtents.y * abs(dot(float3(0, 1, 0), axis)) +
              aabbExtents.z * abs(dot(float3(0, 0, 1), axis));

    float maxP = max(p0, max(p1, p2));
    float minP = min(p0, min(p1, p2));

    return !(max(-maxP, minP) > r);
}



bool TriangleIntersectsAABB(float3 v0, float3 v1, float3 v2, float3 boxMin, float3 boxMax)
{
    Triangle tri;
    tri.a = v0;
    tri.b = v1;
    tri.c = v2;

    AABB aabb;
    aabb.center = (boxMin + boxMax) * 0.5;
    aabb.extents = (boxMax - boxMin) * 0.5;

    tri.a -= aabb.center;
    tri.b -= aabb.center;
    tri.c -= aabb.center;

    float3 ab = tri.b - tri.a;
    float3 bc = tri.c - tri.b;
    float3 ca = tri.a - tri.c;

    // Cross products of triangle edges with AABB axes
    float3 a00 = float3(0.0, -ab.z, ab.y);
    float3 a01 = float3(0.0, -bc.z, bc.y);
    float3 a02 = float3(0.0, -ca.z, ca.y);

    float3 a10 = float3(ab.z, 0.0, -ab.x);
    float3 a11 = float3(bc.z, 0.0, -bc.x);
    float3 a12 = float3(ca.z, 0.0, -ca.x);

    float3 a20 = float3(-ab.y, ab.x, 0.0);
    float3 a21 = float3(-bc.y, bc.x, 0.0);
    float3 a22 = float3(-ca.y, ca.x, 0.0);

    // SAT tests
    if (!TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, a00) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, a01) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, a02) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, a10) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, a11) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, a12) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, a20) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, a21) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, a22) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, float3(1, 0, 0)) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 1, 0)) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 0, 1)) ||
        !TriangleIntersectsAABBSat(tri.a, tri.b, tri.c, aabb.extents, cross(ab, bc)))
    {
        return false;
    }

    return true;
}



//[numthreads(10, 10, 1)]
//void CSMain(uint3 id : SV_DispatchThreadID)
//{
//    uint index = id.x * 10 + id.y; // Ensure index calculation matches grid size
//    if (index < gridSize.x * gridSize.y * gridSize.z)
//    {
//        Voxel voxel;
//        voxel.position = float3(id.x, 0.5, id.y) + centerPosition; // Position relative to center
//        voxel.color = rand(voxel.position.xz);

//        float r = rand(float2(id.x + centerPosition.x, id.y + centerPosition.y));
//        float g = rand(float2(id.y + centerPosition.y, id.x + centerPosition.x));
//        float b = rand(float2(id.x + centerPosition.x, id.x + centerPosition.x));

//        voxel.color = float4(r, g, b, 1.0);
//        voxels[index] = voxel;
//    }
//}

[numthreads(10, 10, 10)]
void CSVoxelizeMap(uint3 id : SV_DispatchThreadID)
{

    uint index = cordToIndex(id);
    if (index >= gridSize.x * gridSize.y * gridSize.z)
        return;

    Voxel voxel;
    
    voxel.position = cordToPos(id);
    float3 position = cordToPos(id);
    
    float3 voxelMin = position - voxelSize * 0.5;
    float3 voxelMax = position + voxelSize * 0.5;
    mapVoxelInfo[index] = 0;
    
    voxel.color = float4(0, 0, 1, 0.05f);
    
    // Iterate over triangles in the mesh
    for (uint i = 0; i < meshIndiceCount; i += 3)
    {
        float3 v0 = meshVertices[meshIndices[i]];
        float3 v1 = meshVertices[meshIndices[i + 1]];
        float3 v2 = meshVertices[meshIndices[i + 2]];
        
    // Check if the voxel intersects the triangle
        if (TriangleIntersectsAABB(v0, v1, v2, voxelMin, voxelMax))
        {
            mapVoxelInfo[index] = 1; // 1 is occupied
            voxel.color = float4(1, 0, 0, 1); // Example: color occupied voxels red
            break;
        }
    }

 
    mapVoxels[index] = voxel;
    
}



#define MAX_STACK_SIZE 1024

[numthreads(1, 1, 1)]
void CSCreateSmokeVoxels(uint3 id : SV_DispatchThreadID)
{
    uint index = posToIndex(smokeCenter); // Index in 1D array
    uint3 cord = indexToCord(index);
    float3 position = smokeCenter;

    uint smokeCount = 0;
    // Stack for flood fill algorithm
    uint4 stack[MAX_STACK_SIZE]; // -> cordinatlar ve step count var stackte
    uint stackPointer = 0;

    stack[stackPointer++] = uint4(cord,0);
    
    
    Voxel startVoxel;
    startVoxel.position = indexToPos(index);
        
        // Randomize smoke voxel color for visual variety
    float r = rand(float2(id.x + centerPosition.x, id.y + centerPosition.y));
    float g = rand(float2(id.y + centerPosition.y, id.x + centerPosition.x));
    float b = rand(float2(id.x + centerPosition.x, id.x + centerPosition.x));

    startVoxel.color = float4(r, g, b, 1);
    smokeVoxels[smokeCount] = startVoxel;
    smokeCount += 1;

    while (stackPointer > 0)
    {
        uint3 currentCor = stack[--stackPointer].xyz;
        uint stepId = stack[stackPointer].w;
        uint currentIndex = cordToIndex(currentCor);
        
        float3 currentPosition = indexToPos(currentIndex);

        // Skip voxel and not go with it
        if (length((currentPosition - smokeCenter) / smokeRadius) > 1.0f || mapVoxelInfo[currentIndex] != 0)
        {
            continue;
        }


        Voxel currentVoxel;
        currentVoxel.position = currentPosition;
        
        // Randomize smoke voxel color for visual variety
        float r = rand(float2(currentCor.x + centerPosition.x, currentCor.y + centerPosition.y));
        float g = rand(float2(currentCor.y + centerPosition.y, currentCor.x + centerPosition.x));
        float b = rand(float2(currentCor.x + centerPosition.x, currentCor.x + centerPosition.x));

        currentVoxel.color = float4(r, g, b, 1);
        currentVoxel.color = float4(0.2f, 0.2f, 0.2f, 0.5f);

        // Mark this voxel as processed
        mapVoxelInfo[currentIndex] = 2;
        smokeVoxels[smokeCount] = currentVoxel;
        smokeCount += 1;


        // Add neighboring voxels to the stack
        uint3 neighbors[6] =
        {
            uint3(currentCor.x + 1, currentCor.y, currentCor.z),
            uint3(currentCor.x - 1, currentCor.y, currentCor.z),
            uint3(currentCor.x, currentCor.y + 1, currentCor.z),
            uint3(currentCor.x, currentCor.y - 1, currentCor.z),
            uint3(currentCor.x, currentCor.y, currentCor.z + 1),
            uint3(currentCor.x, currentCor.y, currentCor.z - 1)
        };

        for (int i = 0; i < 6; i++)
        {
            uint3 neighborId = neighbors[i];
            // Check bounds
            if (neighborId.x < gridSize.x && neighborId.y < gridSize.y && neighborId.z < gridSize.z && stackPointer < MAX_STACK_SIZE)
            {
                stack[stackPointer++] = uint4(neighborId,stepId+1);
            }
        }
    }
}


